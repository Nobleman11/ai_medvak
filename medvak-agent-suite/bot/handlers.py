from __future__ import annotations
import os
import logging
from typing import Any, Dict, List, Optional, Tuple

from telegram import Update
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from . import api
from .parser_csv import sanitize_csv_text, is_probable_csv_text
from .keyboards import preview_item_kb

log = logging.getLogger("bot.handlers")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º ‚Äî –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏ —Ç–µ–∫—É—â–∏–π PREVIEW)
STATE: Dict[int, Dict[str, Any]] = {}

DEFAULT_REL = os.getenv("VAC_REQ_ODKB_REL", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è")
ENV_ODKB_TABLE = os.getenv("VACANCIES_TABLE_ODKB_ID", "")
CHAT_ENABLED = os.getenv("CHAT_ENABLED", "0") == "1"
WEB_SCRAPE_ENABLED = os.getenv("WEB_SCRAPE_ENABLED", "0") == "1"
WEB_DEFAULT_PAGES = int(os.getenv("WEB_DEFAULT_PAGES", "2"))


def _ensure_state(user_id: int) -> Dict[str, Any]:
    st = STATE.get(user_id)
    if not st:
        st = {"table_id": None, "rel_name": DEFAULT_REL, "preview": []}
        STATE[user_id] = st
    return st


def _render_item_card(item: Dict[str, Any], idx: int) -> Tuple[str, 'InlineKeyboardMarkup']:
    rec = item.get("record", {})
    uncertain = item.get("uncertain", [])
    conf = item.get("confidence", 0)

    title = rec.get("Title") or "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)"
    dept = rec.get("–û—Ç–¥–µ–ª–µ–Ω–∏–µ") or "‚Äî"
    role = rec.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å") or "‚Äî"
    worker = ", ".join(rec.get("–†–∞–±–æ—Ç–Ω–∏–∫", []) or []) or "‚Äî"
    schedule = ", ".join(rec.get("–ì—Ä–∞—Ñ–∏–∫", []) or []) or "‚Äî"
    shift = ", ".join(rec.get("–¢–∏–ø_—Å–º–µ–Ω—ã", []) or []) or "‚Äî"
    time_ = ", ".join(rec.get("–í—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã", []) or []) or "‚Äî"
    salary = rec.get("–ó–∞—Ä–ø–ª–∞—Ç–∞") or "‚Äî"
    contact = rec.get("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ_–ª–∏—Ü–æ") or "‚Äî"
    status = rec.get("–°—Ç–∞—Ç—É—Å") or "‚Äî"

    lines = [
        f"üîé #{idx+1} ‚Ä¢ conf={conf}",
        f"üßæ {title}",
        f"üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {dept}",
        f"üë§ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}",
        f"üë• –†–∞–±–æ—Ç–Ω–∏–∫: {worker}",
        f"üìÖ –ì—Ä–∞—Ñ–∏–∫: {schedule}",
        f"üïí –°–º–µ–Ω—ã: {shift}",
        f"‚è± –í—Ä–µ–º—è: {time_}",
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}",
        f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {contact}",
        f"üìå –°—Ç–∞—Ç—É—Å: {status}",
    ]
    if uncertain:
        ulist = "; ".join([f"{u.get('field')} ‚áí {', '.join(u.get('suggest', []) or [])}" for u in uncertain])
        lines.append(f"‚ö†Ô∏è –ù–µ–ø–æ–ø–∞–¥–∞–Ω–∏—è: {ulist}")

    return "\n".join(lines), preview_item_kb(idx)


async def _require_table(update: Update, _: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]) -> bool:
    if st.get("table_id"):
        return True
    hint = f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: /use_table {ENV_ODKB_TABLE}" if ENV_ODKB_TABLE else ""
    await update.effective_message.reply_text(
        "–ù–µ –∑–∞–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –£–∫–∞–∂–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π:\n/use_table <TABLE_ID>" + hint
    )
    return False


# ---------------------- Commands ----------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = _ensure_state(update.effective_user.id)
    msg = [
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é CSV –≤ —á–∏—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ NocoDB.",
        "–ö–æ–º–∞–Ω–¥—ã:",
        "‚Ä¢ /use_table <TABLE_ID> ‚Äî –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å",
        f"‚Ä¢ /use_rel <REL_NAME> ‚Äî —Å–≤—è–∑—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (—Å–µ–π—á–∞—Å: {st.get('rel_name')})",
        "‚Ä¢ /parse <CSV-—Ç–µ–∫—Å—Ç> ‚Äî –ø—Ä–µ–≤—å—é –∏–∑ —Ç–µ–∫—Å—Ç–∞",
        "‚Ä¢ /preview ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
        "‚Ä¢ /confirm ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
        "‚Ä¢ /status ‚Äî –∑–¥–æ—Ä–æ–≤—å–µ –∞–≥–µ–Ω—Ç–∞",
    ]
    if CHAT_ENABLED:
        msg.append("–ß–∞—Ç –≤–∫–ª—é—á—ë–Ω ‚Äî –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–∞–π–¥–∏ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ —Ä—É –º–µ–¥—Å–µ—Å—Ç—ë—Ä –≤ –û–î–ö–ë –Ω–∞ 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã¬ª).")
    await update.message.reply_text("\n".join(msg))


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    h = await api.agent_health()
    await update.message.reply_text(f"‚úÖ agent ok: {h}")


async def cmd_use_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = _ensure_state(update.effective_user.id)
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use_table <TABLE_ID>")
        return
    st["table_id"] = context.args[0].strip()
    await update.message.reply_text(f"–¢–∞–±–ª–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `{st['table_id']}`", parse_mode="Markdown")


async def cmd_use_rel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = _ensure_state(update.effective_user.id)
    if not context.args:
        await update.message.reply_text(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use_rel <REL_NAME>\n–¢–µ–∫—É—â–µ–µ: {st['rel_name']}")
        return
    st["rel_name"] = " ".join(context.args).strip()
    await update.message.reply_text(f"–ò–º—è —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {st['rel_name']}")


async def cmd_parse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """CSV-—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ‚Üí –ø—Ä–µ–≤—å—é."""
    text = update.message.text or ""
    csv_text = text.partition(" ")[2].strip()
    if not csv_text:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç CSV –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.")
        return
    data = await api.preview_csv(csv_text)
    items = data.get("items", [])
    st = _ensure_state(update.effective_user.id)
    st["preview"] = items
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(items)}")
    await _send_preview_batch(update, context, items)


async def cmd_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = _ensure_state(update.effective_user.id)
    items = st.get("preview", [])
    if not items:
        await update.message.reply_text("–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ CSV –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse.")
        return
    await _send_preview_batch(update, context, items)


async def cmd_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = _ensure_state(update.effective_user.id)
    if not await _require_table(update, context, st):
        return
    items = st.get("preview", [])
    if not items:
        await update.message.reply_text("–ù–µ—á–µ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ PREVIEW.")
        return
    records = [it.get("record", {}) for it in items]
    res = await api.write_records(records, table_id=st["table_id"], rel_name=st.get("rel_name"))
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏: {res}")


# ---------------- Documents / Text ----------------

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """CSV-—Ñ–∞–π–ª ‚Üí –ø—Ä–µ–≤—å—é."""
    doc = update.message.document
    if not doc:
        return
    if not (doc.file_name or "").lower().endswith((".csv", ".txt")):
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ CSV –∏–ª–∏ TXT —Ñ–∞–π–ª.")
        return

    file = await doc.get_file()
    data = await file.download_as_bytearray()
    try:
        csv_text = data.decode("utf-8")
    except UnicodeDecodeError:
        csv_text = data.decode("cp1251", errors="replace")
    csv_text = sanitize_csv_text(csv_text)

    preview = await api.preview_csv(csv_text)
    items = preview.get("items", [])
    st = _ensure_state(update.effective_user.id)
    st["preview"] = items
    await update.message.reply_text(f"–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ö–∞—Ä—Ç–æ—á–µ–∫: {len(items)}")
    await _send_preview_batch(update, context, items)


async def on_plain_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
      1) –µ—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ CSV ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–≤—å—é,
      2) –µ—Å–ª–∏ —á–∞—Ç –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /chat –∏, –ø—Ä–∏ intent=scrape, –∑–∞–ø—É—Å–∫–∞–µ–º /scrape ‚Üí PREVIEW,
      3) –∏–Ω–∞—á–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ CSV.
    """
    text = (update.message.text or "").strip()
    if not text:
        return

    # (1) –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ CSV
    if is_probable_csv_text(text):
        data = await api.preview_csv(sanitize_csv_text(text))
        items = data.get("items", [])
        st = _ensure_state(update.effective_user.id)
        st["preview"] = items
        await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–ª CSV. –ö–∞—Ä—Ç–æ—á–µ–∫: {len(items)}")
        await _send_preview_batch(update, context, items)
        return

    # (2) –ß–∞—Ç + –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if CHAT_ENABLED:
        data = await api.chat(text)  # {"reply": "...", "intent": {...}}
        reply = data.get("reply") or ""
        intent = data.get("intent") or {}
        action = intent.get("action")

        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–µ–π–ø–∞ ‚Üí PREVIEW
        if action == "scrape":
            if not WEB_SCRAPE_ENABLED:
                await update.message.reply_text((reply + "\n\n‚ö†Ô∏è –í–µ–±-—Å–∫—Ä–µ–π–ø –≤—ã–∫–ª—é—á–µ–Ω (WEB_SCRAPE_ENABLED=0).").strip())
                return

            src = intent.get("source") or "zp"
            qry = intent.get("query") or "–º–µ–¥—Å–µ—Å—Ç—Ä–∞"
            hosp = intent.get("hospital")
            pages = int(intent.get("pages") or WEB_DEFAULT_PAGES)

            if reply:
                await update.message.reply_text(reply)

            prev = await api.scrape(src, qry, hosp, pages)
            items = prev.get("items", [])
            st = _ensure_state(update.effective_user.id)
            st["preview"] = items
            await update.message.reply_text(
                f"–ì–æ—Ç–æ–≤–æ. –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ PREVIEW: {len(items)}.\n"
                f"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å ‚Äî —É–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /use_table <TABLE_ID>, –∑–∞—Ç–µ–º /confirm."
            )
            await _send_preview_batch(update, context, items)
            return

        # Small talk / –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if reply:
            await update.message.reply_text(reply)
            return

    # (3) –ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text("–Ø —Ä–∞–±–æ—Ç–∞—é —Å CSV –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse <CSV>.")


# ---------------- Callbacks & Helpers ----------------

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    uid = update.effective_user.id
    st = _ensure_state(uid)
    items = st.get("preview", [])

    if data.startswith("write_one:"):
        if not await _require_table(update, context, st):
            return
        idx = int(data.split(":")[1])
        if idx < 0 or idx >= len(items):
            await query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        rec = items[idx].get("record", {})
        res = await api.write_records([rec], table_id=st["table_id"], rel_name=st.get("rel_name"))
        await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {res}")
        return

    if data.startswith("skip_one:"):
        idx = int(data.split(":")[1])
        if 0 <= idx < len(items):
            items.pop(idx)
            await query.edit_message_text("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
        else:
            await query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return


async def _send_preview_batch(update: Update, context: ContextTypes.DEFAULT_TYPE, items: List[Dict[str, Any]]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 10 –∫–∞—Ä—Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å —á–∞—Ç."""
    chat_id = update.effective_chat.id
    if not items:
        await context.bot.send_message(chat_id, "–ü—É—Å—Ç–æ.")
        return
    limit = min(len(items), 10)
    for i in range(limit):
        text, kb = _render_item_card(items[i], i)
        await context.bot.send_message(chat_id, text, reply_markup=kb)


def register(app):
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("use_table", cmd_use_table))
    app.add_handler(CommandHandler("use_rel", cmd_use_rel))
    app.add_handler(CommandHandler("parse", cmd_parse))
    app.add_handler(CommandHandler("preview", cmd_preview))
    app.add_handler(CommandHandler("confirm", cmd_confirm))

    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.Document.ALL, on_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_plain_text))
